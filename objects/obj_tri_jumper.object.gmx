<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_triangle_sm</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_enemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

image_angle = random_range(0, 359);

jump = false;

hp = 3;
moverange = 200;
movespeed = 1;
hsp = sign(random_range(-1,1)) * movespeed;
jumpspeed = 2;
acc = 0.5;
grav = 0.05;

alarm[0] = 1;

particle_jump = part_type_create();
part_type_shape(particle_jump,pt_shape_smoke);
part_type_size(particle_jump,0.10,0.50,0,0);
part_type_scale(particle_jump,1,1);
part_type_color2(particle_jump,12632256,8421504);
part_type_alpha1(particle_jump,1);
part_type_speed(particle_jump,0.50,1,0,0);
part_type_direction(particle_jump,40,120,0,0);
part_type_gravity(particle_jump,0.00,90);
part_type_orientation(particle_jump,0,0,0,0,1);
part_type_blend(particle_jump,1);
part_type_life(particle_jump,30,30);

emitter_jump = part_emitter_create(global.PSYSTEM);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>jump = true;

part_emitter_region(global.PSYSTEM,emitter_jump,x-50,x+50,y+sprite_height/2,y+sprite_height/2,ps_shape_rectangle,1);
part_emitter_burst(global.PSYSTEM, emitter_jump, particle_jump, 3 + irandom(3));

vsp = -jumpspeed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

//Gravity effect
if (vsp &lt; 5) vsp += grav;

//Horizontal Collision
if (place_meeting(x+global.TIME_PASSED*hsp,y,obj_wall)) {
    hsp = -hsp;
}

//Vertical Collision
if (place_meeting(x,y+global.TIME_PASSED*vsp,obj_ground)) {
    vsp = 0;
    jump = false;
    
    if (alarm[0] &lt;= 0) {
        hsp = sign(random_range(-1,1)) * hsp;
        if (x &gt; spawnx + moverange) {
            hsp = -movespeed;
        } else if (x &lt; spawnx - moverange) {
            hsp = movespeed;
        }
        part_emitter_region(global.PSYSTEM,emitter_jump,x-50,x+50,y+sprite_height/2,y+sprite_height/2,ps_shape_rectangle,1);
        part_emitter_burst(global.PSYSTEM, emitter_jump, particle_jump, 3 + irandom(3));
        alarm[0] = 60;
    }
}

if (jump) {
    if (hsp &gt; 0) {
        image_angle -= global.SPD / 100 * 360 / (2 * jumpspeed / grav);
    } else if (hsp &lt; 0) {
        image_angle += global.SPD / 100 * 360 / (2 * jumpspeed / grav);
    }
    x += global.TIME_PASSED * hsp;
    y += global.TIME_PASSED * vsp;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();

if (global.debug) {
    draw_line(spawnx - moverange, spawny, spawnx + moverange, spawny);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
