<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_circle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Variables
enum aimdir {
    left = 180,
    right = 0,
    up = 90,
    down = 270
}

instance_create(x + 45, y, obj_gun);

hsp = 0;
vsp = 0;

grav = 1;
grounded = true;

movespeed = 10;
jumpspeed = 15;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Get the player's input
key_right = keyboard_check(ord('D'));
key_left = -keyboard_check(ord('A'));
key_up = -keyboard_check(ord('W'));
key_down = keyboard_check(ord('S'));

key_jump = keyboard_check_pressed(ord('L'));
key_shoot = keyboard_check_pressed(ord('K'));

//React to inputs
hdir = key_left + key_right;
vdir = key_up + key_down;
hsp = hdir * movespeed;

//Assign dir for obj_gun
if (hdir &lt; 0) {
    obj_gun.dir = aimdir.left;
    obj_gun.old_dir = obj_gun.dir;
} else if (hdir &gt; 0) {
    obj_gun.dir = aimdir.right;
    obj_gun.old_dir = obj_gun.dir;
}
//Up+Down overwrites Left+Right
if (vdir &lt; 0) {
    obj_gun.dir = aimdir.up;
} else if (vdir &gt; 0) {
    obj_gun.dir = aimdir.down;
} else {
    obj_gun.dir = obj_gun.old_dir;
}

//Gravity effect
if (vsp &lt; 25) vsp += grav;

//Shoot
if (obj_gun.can_shoot and obj_gun.num_bullets &gt; 0 and key_shoot) {
    //Horizontal recoil
    if (obj_gun.dir = aimdir.left) {
        if (hdir == 0) {
            hsp += movespeed;
        } else {
            hsp += movespeed * 2;
        }
    } else if (obj_gun.dir = aimdir.right) {
        if (hdir == 0) {
            hsp -= movespeed;
        } else {
            hsp -= movespeed * 2;
        }
    }
}

//Shoot down
if (obj_gun.can_shoot and obj_gun.num_bullets &gt; 0 and vdir &gt; 0 and key_shoot) {
    if (vsp &gt; 0) {
        vsp += -25;
    } else if (vsp &gt; -5) {
        vsp += -jumpspeed;
    }
}

if (place_meeting(x,y+1,obj_wall)) {
    vsp = key_jump * -jumpspeed;
}

//Horizontal Collision
if (place_meeting(x+hsp,y,obj_wall)) {
    while(!place_meeting(x+sign(hsp),y,obj_wall)) {
        x += sign(hsp);
    }
    hsp = 0;
}
x += hsp;

//Vertical Collision
if (place_meeting(x,y+vsp,obj_wall)) {
    while(!place_meeting(x,y+sign(vsp),obj_wall)) {
        y += sign(vsp);
    }
    vsp = 0;
}
y += vsp;

//Hack to ground character, will fix later with special ground object
if (vsp == 0 and y &gt;= room_height - sprite_height) {
    grounded = true;
} else if (key_jump) {
    grounded = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
