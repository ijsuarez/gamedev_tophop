<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_bullet</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_bullet</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

image_index = 1;

particle_shieldshatter = part_type_create();
part_type_shape(particle_shieldshatter,pt_shape_line)
part_type_size(particle_shieldshatter,0.25,0.75,0,0);
part_type_scale(particle_shieldshatter,1,1);
part_type_color2(particle_shieldshatter,3289855,3309823);
part_type_alpha1(particle_shieldshatter,1);
part_type_speed(particle_shieldshatter,10,20,0,0);
part_type_direction(particle_shieldshatter,-30,30,0,0);
part_type_gravity(particle_shieldshatter,0.50,270);
part_type_orientation(particle_shieldshatter,0,359,0,0,1);
part_type_blend(particle_shieldshatter,1);
part_type_life(particle_shieldshatter,70,70);

emitter_shieldshatter = part_emitter_create(global.PSYSTEM);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

part_emitter_destroy(global.PSYSTEM, emitter_shieldshatter);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var next_x = x + hspeed;
var next_y = y + vspeed;
var enemy, shield;

if (direction == aimdir.left) {
    for (i = x; i &gt;= next_x; i--) {
        if (place_meeting(i, y, obj_wall)) {
            instance_destroy();
        }
        enemy = instance_place(i, y, obj_enemy);
        shield = instance_place(i, y, obj_shield);
        if (shield != noone) {
            with (shield) {
                audio_play_sound(snd_hit, 3, false);
                part_type_direction(other.particle_shieldshatter,140,200,0,0);
                part_emitter_region(global.PSYSTEM,other.emitter_shieldshatter,x,x,y-10,y+10,0,0);
                part_emitter_burst(global.PSYSTEM, other.emitter_shieldshatter, other.particle_shieldshatter, 5 + irandom(5));
                instance_destroy();
            }
            instance_destroy();
            break;
        } else if (enemy != noone) {
            with (enemy) {
                hp-=3;
                hit = true;
                audio_play_sound(snd_hit, 3, false);
                if (hp &lt;= 0) {
                    part_type_direction(other.particle_trishatter,140,200,0,0);
                    part_emitter_region(global.PSYSTEM,other.emitter_trishatter,x,x,y,y,0,0);
                    part_emitter_burst(global.PSYSTEM, other.emitter_trishatter, other.particle_trishatter, 10 + irandom(5));
                }
            }
            instance_destroy();
        } else if (i &lt; spawnx - shotrange) {
            instance_destroy();
        }
    }
} else if (direction == aimdir.right) {
    for (i = x; i &lt; next_x; i++) {
        if (place_meeting(i, y, obj_wall)) {
            instance_destroy();
        }
        enemy = instance_place(i, y, obj_enemy);
        shield = instance_place(i, y, obj_shield);
        if (shield != noone) {
            with (shield) {
                audio_play_sound(snd_hit, 3, false);
                part_type_direction(other.particle_shieldshatter,-20,40,0,0);
                part_emitter_region(global.PSYSTEM,other.emitter_shieldshatter,x,x,y-10,y+10,0,0);
                part_emitter_burst(global.PSYSTEM, other.emitter_shieldshatter, other.particle_shieldshatter, 5 + irandom(5));
                instance_destroy();
            }
            instance_destroy();
            break;
        } else if (enemy != noone) {
            with (enemy) {
                hp-=3;
                hit = true;
                audio_play_sound(snd_hit, 3, false);
                if (hp &lt;= 0) {
                    part_type_direction(other.particle_trishatter,-20,40,0,0);
                    part_emitter_region(global.PSYSTEM,other.emitter_trishatter,x,x,y,y,0,0);
                    part_emitter_burst(global.PSYSTEM, other.emitter_trishatter, other.particle_trishatter, 10 + irandom(5));
                }
            }
            instance_destroy();
        } else if (i &gt; spawnx + shotrange) {
            instance_destroy();
        }
    }
} else if (direction == aimdir.down) {
    for (i = y; i &lt; next_y; i++) {
        if (place_meeting(x, i, obj_wall)) {
            instance_destroy();
        }
        enemy = instance_place(x, i, obj_enemy);
        shield = instance_place(x, i, obj_shield);
        if (shield != noone) {
            with (shield) {
                audio_play_sound(snd_hit, 3, false);
                part_type_direction(other.particle_shieldshatter,60,120,0,0);
                part_emitter_region(global.PSYSTEM,other.emitter_shieldshatter,x,x,y-10,y+10,0,0);
                part_emitter_burst(global.PSYSTEM, other.emitter_shieldshatter, other.particle_shieldshatter, 5 + irandom(5));
                instance_destroy();
            }
            instance_destroy();
            break;
        } else if (enemy != noone) {
            with (enemy) {
                hp-=3;
                hit = true;
                audio_play_sound(snd_hit, 3, false);
                if (hp &lt;= 0) {
                    part_type_direction(other.particle_trishatter,60,120,0,0);
                    part_emitter_region(global.PSYSTEM,other.emitter_trishatter,x,x,y,y,0,0);
                    part_emitter_burst(global.PSYSTEM, other.emitter_trishatter, other.particle_trishatter, 10 + irandom(5));
                }
            }
            instance_destroy();
        } else if (i &gt; spawny + shotrange) {
            instance_destroy();
        }
    }
} else if (direction == aimdir.up) {
    for (i = y; i &gt;= next_y; i--) {
        if (place_meeting(x, i, obj_wall)) {
            instance_destroy();
        }
        enemy = instance_place(x, i, obj_enemy);
        shield = instance_place(x, i, obj_shield);
        if (shield != noone) {
            with (shield) {
                audio_play_sound(snd_hit, 3, false);
                part_type_direction(other.particle_shieldshatter,240,300,0,0);
                part_emitter_region(global.PSYSTEM,other.emitter_shieldshatter,x,x,y-10,y+10,0,0);
                part_emitter_burst(global.PSYSTEM, other.emitter_shieldshatter, other.particle_shieldshatter, 5 + irandom(5));
                instance_destroy();
            }
            instance_destroy();
            break;
        } else if (enemy != noone) {
            with (enemy) {
                hp-=3;
                hit = true;
                audio_play_sound(snd_hit, 3, false);
                if (hp &lt;= 0) {
                    part_type_direction(other.particle_trishatter,240,300,0,0);
                    part_emitter_region(global.PSYSTEM,other.emitter_trishatter,x,x,y,y,0,0);
                    part_emitter_burst(global.PSYSTEM, other.emitter_trishatter, other.particle_trishatter, 10 + irandom(5));
                }
            }
            instance_destroy();
        } else if (i &lt; spawny - shotrange) {
            instance_destroy();
        }
    }
} else {
    show_debug_message("Error in bullet direction."); //shouldn't happen
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
